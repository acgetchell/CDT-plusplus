name: macOS

on: [push, pull_request, workflow_dispatch]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]
        include:
          - os: macos-latest
            compiler: clang
            target: Macos

          - os: ubuntu-latest
            compiler: g++-10
            target: Linux

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: true

    - name: Cache vcpkg
      uses: actions/cache@v2
      env:
        cache-name: cache-vcpkg
      with:
        path: ~/.cache/vcpkg
        key:  ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/status') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Setup
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt update
          sudo apt-get install build-essential automake autoconf autoconf-archive texinfo libtool-bin yasm ninja-build g++-10 ccache
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ g++ /usr/bin/g++-10
          export CXX="g++-10" CC="gcc-10"
        elif [ "$RUNNER_OS" == "macOS" ]; then
          brew install automake autoconf autoconf-archive libtool texinfo yasm ninja python ccache
        else
          echo "$RUNNER_OS not supported"
          exit 1
        fi
        cd $VCPKG_INSTALLATION_ROOT
        git reset --hard
        git pull --no-rebase
        ./bootstrap-vcpkg.sh
        vcpkg integrate install
        cmake --version

    - name: Build
      shell: bash 
      run: |
        pwd
        vcpkg install --feature-flags=manifests
        export VCPKG_ROOT="$VCPKG_INSTALLATION_ROOT"
        cmake -G Ninja -D CMAKE_BUILD_TYPE=Debug -S . -B build
        cmake --build build

  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    env:
      SONAR_SCANNER_VERSION: 4.6.1.2450 # Find the latest version in the "Linux" link on this page:
                                        # https://sonarcloud.io/documentation/analysis/scan/sonarscanner/
      SONAR_SERVER_URL: "https://sonarcloud.io"
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Cache vcpkg
        uses: actions/cache@v2
        env:
          cache-name: cache-vcpkg
        with:
          path: ~/.cache/vcpkg
          key:  ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/status') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Setup
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt update
          sudo apt-get install build-essential automake autoconf autoconf-archive texinfo libtool-bin yasm ninja-build g++-10 ccache lcov
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ g++ /usr/bin/g++-10
          export CXX="g++-10" CC="gcc-10"
          cd $VCPKG_INSTALLATION_ROOT
          git reset --hard
          git pull --no-rebase
          ./bootstrap-vcpkg.sh
          vcpkg integrate install

      - name: Install vcpkg packages and configure CMake
        shell: bash
        run: |
          vcpkg install --feature-flags=manifests
          export VCPKG_ROOT="$VCPKG_INSTALLATION_ROOT"
          cmake -G Ninja -D CMAKE_BUILD_TYPE=Debug -D ENABLE_COVERAGE:BOOL=TRUE -S . -B build

      - name: Cache SonarCloud packages and analysis
        uses: actions/cache@v2
        id: sonarcloud-cache
        with:
          path: ~/.sonar
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Download and setup sonar-scanner
        shell: bash
        env:
          SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-linux.zip
        if: steps.sonarcloud-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p $HOME/.sonar
          curl -sSLo $HOME/.sonar/sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }}
          unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/

      - name: Download and setup build-wrapper
        shell: bash
        env:
          BUILD_WRAPPER_DOWNLOAD_URL: ${{ env.SONAR_SERVER_URL }}/static/cpp/build-wrapper-linux-x86.zip
        if: steps.sonarcloud-cache.outputs.cache-hit != 'true'
        run: |
          curl -sSLo $HOME/.sonar/build-wrapper-linux-x86.zip ${{ env.BUILD_WRAPPER_DOWNLOAD_URL }}
          unzip -o $HOME/.sonar/build-wrapper-linux-x86.zip -d $HOME/.sonar/

      - name: Set build-wrapper and sonar-scanner paths
        run: |
          echo "$HOME/.sonar/build-wrapper-linux-x86" >> $GITHUB_PATH
          echo "$HOME/.sonar/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-linux/bin" >> $GITHUB_PATH

      - name: Build
        run: build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build build

#      - name: Test and generate coverage
#        continue-on-error: true
#        run: |
#          cd $GITHUB_WORKSPACE/build
#          ctest ctest --schedule-random -j2
#          lcov --capture --directory . --output-file coverage.info
#          lcov --remove coverage.info '/usr/*' '*/usr/include/*' '*/vcpkg/*' --output-file coverage.info
#          lcov --list coverage.info

      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR info, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: sonar-scanner --define sonar.host.url="${{ env.SONAR_SERVER_URL }}" --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"