# Adapted from Louis Dionne's .travis.yml for boost::hana
# https://github.com/boostorg/hana/blob/master/.travis.yml
#
# Copyright Louis Dionne 2013-2017
#
# Boost Software License - Version 1.0 - August 17th, 2003
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute, execute,
# and transmit the Software, and to prepare derivative works of the Software,
# and to permit third-parties to whom the Software is furnished to do so, all
# subject to the following:
#
# The copyright notices in the Software and this entire statement, including the
# above license grant, this restriction and the following disclaimer, must be
# included in all copies of the Software, in whole or in part, and all
# derivative works of the Software, unless such copies or derivative works are
# solely in the form of machine-executable object code generated by a source
# language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR
# ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

language: cpp
sudo: required

env:
  global:
   # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
   #   via the "travis encrypt" command using the project repo's public key
   - secure: "a6fYvd3gtfZ3zZFJ1IhnUBbc5DIoywkXuu8dORjlQIDMYZH6CS7LES07WNWFU9vikhD/L7gRa3UJiTttXAuYW2xI6n9tb0Ug2piBF35Xi+mM42q1XPBqSaSbKqySVGBzyyxl0yBcw1SiHPg6jITmDXnRtpZRqChGUXOH4exGgp4="
  matrix:
    - TRAVIS_EMPTY_JOB_WORKAROUND=true

addons:
  apt:
    packages:
      - g++-6
      - libeigen3-dev
      - libmpfr-dev
      - libtbb-dev
      - ninja-build
    sources: &sources
      - ubuntu-toolchain-r-test
#  coverity_scan:
#      project:
#        name: "acgetchell/CDT-plusplus"
#      notification_email: acgetchell@ucdavis.edu
#      build_command_prepend:
#      build_command:   "./build.sh"
#      branch_pattern: master

cache:
  directories:
    - ${TRAVIS_BUILD_DIR}/deps/llvm-3.9.0
    - ${TRAVIS_BUILD_DIR}/deps/boost-1.63.0

matrix:
  exclude:
    - env: TRAVIS_EMPTY_JOB_WORKAROUND=true
#
  include:
    # XCode 8 = AppleClang 8
    - os: osx
      env: BOOST_VERSION=default
      osx_image: xcode8.2

    # GCC 6
    - os: linux
      env: COMPILER=g++-6 BOOST_VERSION=default
      dist: trusty

    # gcc on MacOS
    - os: osx
      env: COMPILER=g++-6 BOOST_VERSION=default
      osx_image: xcode8.2

    # Clang 3.9
    - os: linux
      env: LLVM_VERSION=3.9.0 BOOST_VERSION=default
      compiler: clang
      dist: trusty

  allow_failures:




before_install:
# Workaround for https://github.com/travis-ci/travis-ci/issues/6307
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      gpg2 --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
      rvm get stable --auto-dotfiles
    fi
#  - echo -n | openssl s_client -connect scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-


install:
  ############################################################################
  # All the dependencies are installed in ${TRAVIS_BUILD_DIR}/deps/
  ############################################################################
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}

 ############################################################################
 # Setup default versions and override compiler if needed
 ############################################################################
  - if [[ "${LLVM_VERSION}" == "default" ]]; then LLVM_VERSION=3.9.0; fi
  - if [[ "${BOOST_VERSION}" == "default" ]]; then BOOST_VERSION=1.63.0; fi

  - if [[ "${COMPILER}" != "" ]]; then export CXX=${COMPILER}; fi

  ############################################################################
  # Install Boost headers
  ############################################################################
  - |
    if [[ "${BOOST_VERSION}" != "" ]]; then
      BOOST_DIR=${DEPS_DIR}/boost-${BOOST_VERSION}
      if [[ -z "$(ls -A ${BOOST_DIR})" ]]; then
        if [[ "${BOOST_VERSION}" == "trunk" ]]; then
          BOOST_URL="http://github.com/boostorg/boost.git"
          travis_retry git clone --depth 1 --recursive ${BOOST_URL} ${BOOST_DIR} || exit 1
          (cd ${BOOST_DIR} && ./bootstrap.sh && ./b2 headers)
        else
          BOOST_URL="http://sourceforge.net/projects/boost/files/boost/${BOOST_VERSION}/boost_${BOOST_VERSION//\./_}.tar.gz"
          mkdir -p ${BOOST_DIR}
          { travis_retry wget -O - ${BOOST_URL} | tar --strip-components=1 -xz -C ${BOOST_DIR}; } || exit 1
        fi
        # Make sure we don't conflict with the Hana shipped with Boost
        rm -rf ${BOOST_ROOT}/include/boost/{hana,hana.hpp}
      fi
      CMAKE_OPTIONS+=" -DBOOST_ROOT=${BOOST_DIR}"
    fi

  ############################################################################
  # Install a recent CMake and necessary libraries
  ############################################################################
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      CMAKE_URL="https://cmake.org/files/v3.7/cmake-3.7.2-Linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
    else
      brew unlink cmake
      brew upgrade cmake
      brew install gcc
      brew link --overwrite gcc
      brew install ninja
      brew install eigen
      brew install tbb --c++11
    fi
  - cmake --version

  ############################################################################
  # Install Clang, libc++ and libc++abi
  ############################################################################
  - |
    if [[ "${LLVM_VERSION}" != "" ]]; then
      LLVM_DIR=${DEPS_DIR}/llvm-${LLVM_VERSION}
      if [[ -z "$(ls -A ${LLVM_DIR})" ]]; then
        LLVM_URL="http://llvm.org/releases/${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz"
        LIBCXX_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz"
        LIBCXXABI_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz"
        CLANG_URL="http://llvm.org/releases/${LLVM_VERSION}/clang+llvm-${LLVM_VERSION}-x86_64-linux-gnu-ubuntu-14.04.tar.xz"
        mkdir -p ${LLVM_DIR} ${LLVM_DIR}/build ${LLVM_DIR}/projects/libcxx ${LLVM_DIR}/projects/libcxxabi ${LLVM_DIR}/clang
        travis_retry wget --quiet -O - ${LLVM_URL}      | tar --strip-components=1 -xJ -C ${LLVM_DIR}
        travis_retry wget --quiet -O - ${LIBCXX_URL}    | tar --strip-components=1 -xJ -C ${LLVM_DIR}/projects/libcxx
        travis_retry wget --quiet -O - ${LIBCXXABI_URL} | tar --strip-components=1 -xJ -C ${LLVM_DIR}/projects/libcxxabi
        travis_retry wget --quiet -O - ${CLANG_URL}     | tar --strip-components=1 -xJ -C ${LLVM_DIR}/clang
        (cd ${LLVM_DIR}/build && cmake .. -DCMAKE_INSTALL_PREFIX=${LLVM_DIR}/install -DCMAKE_CXX_COMPILER=clang++)
        (cd ${LLVM_DIR}/build/projects/libcxx && make install -j2)
        (cd ${LLVM_DIR}/build/projects/libcxxabi && make install -j2)
      fi
      export CXXFLAGS="-nostdinc++ -isystem ${LLVM_DIR}/install/include/c++/v1"
      export LDFLAGS="-L ${LLVM_DIR}/install/lib -l c++ -l c++abi"
      export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${LLVM_DIR}/install/lib"
      export PATH="${LLVM_DIR}/clang/bin:${PATH}"
    fi
  - ${CXX} --version

  ############################################################################
  # Install Gmock/Gtest
  ############################################################################
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      INCLUDE_DIR="/usr/include/"
      SH_LIB="so"
      LIB_DIR="/usr/lib/"
      CMAKE_OPTIONS+=" -DBUILD_SHARED_LIBS=ON"
    else
      INCLUDE_DIR="/usr/local/include/"
      SH_LIB="a"
      LIB_DIR="/usr/local/lib/"
    fi
  - if [[ "$CXX" == "clang++" ]]; then CMAKE_OPTIONS+=" -isystem ${LLVM_DIR}/install/include/c++/v1"; fi
  - GTEST_URL="https://github.com/google/googletest.git"
  - travis_retry git clone --depth 1 --recursive --quiet ${GTEST_URL} || exit 1
  - cd googletest/googlemock
  - echo $CMAKE_OPTIONS
  - echo $CXXFLAGS
  - echo $LDFLAGS
  - echo $LD_LIBRARY_PATH
  - cmake $CMAKE_OPTIONS -G Ninja .
  - ninja
  - sudo cp -a include/gmock ${INCLUDE_DIR}
  - sudo cp -a libgmock_main.${SH_LIB} libgmock.${SH_LIB} ${LIB_DIR}
  - cd ../googletest
  - cmake $CMAKE_OPTIONS -G Ninja .
  - ninja
  - sudo cp -a include/gtest ${INCLUDE_DIR}
  - sudo cp -a libgtest_main.${SH_LIB} libgtest.${SH_LIB} ${LIB_DIR}

  # Install CGAL from source
  - cd $TRAVIS_BUILD_DIR
  - curl -L -o CGAL-4.9.tar.gz https://github.com/CGAL/cgal/archive/releases/CGAL-4.9.tar.gz
  - tar zxvf CGAL-4.9.tar.gz &> install.log
  - cd cgal-releases-CGAL-4.9
  - cmake -DCMAKE_BUILD_TYPE=Release -DBoost_USE_STATIC_LIBS=ON -DWITH_Eigen3=ON -DBOOST_ROOT=${BOOST_DIR} -G Ninja .
  - ninja
  - sudo ninja install &> install.log
  - cd ..

script:
  - CMAKE_OPTIONS+=" -DBOOST_ROOT=${BOOST_DIR}"
  - mkdir build && cd build
  - cmake $CMAKE_OPTIONS -G Ninja ..
  - ninja

after_script:
  - cd build
# GMock with random test order
  - "./unittests --gtest_shuffle"
# CTest
  - ninja test

notifications:
  webhooks:
    urls: https://webhooks.gitter.im/e/c70e4d2749931f601747
    on_success: change
    on_failure: always
