language: cpp
sudo: required
dist: trusty
osx_image: xcode9.2
#group: deprecated-2017Q4

addons:
  apt:
    packages:
      - gcc-7
      - g++-7
      - ninja-build
      - clang-5.0
      - libmpfr-dev
      - libgmp3-dev
      - libeigen3-dev
      - libtbb-dev
      - valgrind
    sources: &sources
      - ubuntu-toolchain-r-test
      - llvm-toolchain-trusty-5.0


env:
  global:
   # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
   #   via the "travis encrypt" command using the project repo's public key
   - secure: "cjzdlbVhmLO0B0kzMcl5xAXEXIDRbMYFbaa+dEJTa+sG1VbzdtiXRsleZt8idZs2E0DKFN8Fti4+zrLdlqsx2+gU1fKn2TrfHCvRWNjxLFLCJ0fvkXdmEXVetnKyu27XrsXYJfaNbwUT05hpVvDT60GPt5g64XeJD9RQgX/UEug="
   - BOOST_VERSION=1.66.0
  matrix:
    - TESTS=true
    - TESTS=false

cache:
  apt:
  ccache:
  directories:
    - ${TRAVIS_BUILD_DIR}/boost-${BOOST_VERSION}

os:
  - linux
  - osx

compiler:
  - gcc
  - clang



before_install:
  # Workaround for https://github.com/travis-ci/travis-ci/issues/6307
    - |
      if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        gpg2 --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
        rvm get stable --auto-dotfiles
        brew update
      fi

#  - echo -n | openssl s_client -connect scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-

install:
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      brew outdated cmake || brew upgrade cmake
      brew install gcc
      brew link --overwrite gcc
      brew install ninja
      brew install eigen
      brew install tbb --c++11
    fi
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      CMAKE_URL="https://cmake.org/files/v3.10/cmake-3.10.1-Linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${TRAVIS_BUILD_DIR}/cmake/bin:${PATH}
      if [[ "${BOOST_VERSION}" != "" ]]; then
        BOOST_DIR=${TRAVIS_BUILD_DIR}/boost-${BOOST_VERSION}
        if [[ -z "$(ls -A ${BOOST_DIR})" ]]; then
          if [[ "${BOOST_VERSION}" == "trunk" ]]; then
            BOOST_URL="http://github.com/boostorg/boost.git"
            travis_retry git clone --depth 1 --recursive ${BOOST_URL} ${BOOST_DIR} || exit 1
            (cd ${BOOST_DIR} && ./bootstrap.sh && ./b2 headers)
          else
            BOOST_URL="http://sourceforge.net/projects/boost/files/boost/${BOOST_VERSION}/boost_${BOOST_VERSION//\./_}.tar.gz"
            mkdir -p ${BOOST_DIR}
            { travis_retry wget -O - ${BOOST_URL} | tar --strip-components=1 -xz -C ${BOOST_DIR}; } || exit 1
          fi
        fi
        CMAKE_OPTIONS+=" -DBOOST_ROOT=${BOOST_DIR}"
      fi
      INCLUDE_DIR="/usr/include/"
    fi
  - cmake --version
#  - if [[ "$TRAVIS_OS_NAME" == "linux" && "$CXX" = "g++" ]]; then export CXX="g++-6" CC="gcc-6"; fi
  - if [[ "$CXX" = "g++" ]]; then export CXX="g++-7" CC="gcc-7"; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" && "$CXX" == "clang++" ]]; then export
   CXX="clang++-5.0" CC="clang-5.0"; fi
  - echo $CXX $CC
  # Install CGAL from source for Linux
  - cd $TRAVIS_BUILD_DIR
  - travis_retry curl -L -o CGAL-4.9.1.tar.gz https://github.com/CGAL/cgal/archive/releases/CGAL-4.9.1.tar.gz
  - tar zxvf CGAL-4.9.1.tar.gz &> install.log
  - cd cgal-releases-CGAL-4.9.1
  - echo $CMAKE_OPTIONS
  - cmake -DCMAKE_BUILD_TYPE=Release -DBoost_USE_STATIC_LIBS=ON -DWITH_Eigen3=ON -DBOOST_ROOT=${BOOST_DIR} -G Ninja .
  - cmake --build .
  - sudo env "PATH=$PATH" cmake --build . --target install &> install.log
  - cd ..

#  - ninja
#  - sudo ninja install &> install.log

before_script:
  - mkdir build
  - cd build

matrix:
  fast_finish: true
  include:
    - os: linux
      compiler: gcc
      env: TESTS=false VALGRIND=true
    - os: linux
      compiler: gcc
      env: COVERITY=true
      addons:
        coverity_scan:
          project:
            name: "acgetchell/CDT-plusplus"
            description: "Causal Dynamical Triangulations in C++ with CGAL"
          notification_email: acgetchell@ucdavis.edu
          build_command_prepend: "cmake -DCMAKE_CXX_COMPILER=g++-7 -DTESTS:BOOL=OFF -DCMAKE_BUILD_TYPE=Debug -DBOOST_ROOT=${BOOST_DIR} -DBUILD_SHARED_LIBS=ON .."
          build_command:   "make"
          branch_pattern: develop
      script:
        - echo -n | openssl s_client -connect scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-
  allow_failures:
    - os: linux
      compiler: clang
      env: TESTS=true
    - os: linux
      compiler: clang
      env: TESTS=false
    - os: linux
      compiler: gcc
      env: COVERITY=true

script:
  - |
    if [[ "${COVERITY_SCAN_BRANCH}" != 1 ]]; then
      CMAKE_OPTIONS="-DBOOST_ROOT=${BOOST_DIR} -DBUILD_SHARED_LIBS=ON"
      if [[ ${TESTS} == "true" ]]; then
        CMAKE_OPTIONS+=" -DCMAKE_BUILD_TYPE=Release -DTESTS:BOOL=ON"
      else
        CMAKE_OPTIONS+=" -DCMAKE_BUILD_TYPE=Release -DTESTS:BOOL=OFF"
      fi
      if [[ ${VALGRIND} == "true" ]]; then CMAKE_OPTIONS+=" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=-O0 -DTESTS:BOOL=OFF"; fi
      echo $CMAKE_OPTIONS
      cmake $CMAKE_OPTIONS -G Ninja ..
      cmake --build .
    fi

after_success:
  - cd build
  # Catch tests showing only failures
  - if [[ ${TESTS} == "true" ]]; then ./tests/CDT_test; fi
  - if [[ ${VALGRIND} == "true" ]]; then valgrind --leak-check=full --show-leak-kinds=all ./cdt --s -n640 -t4 -a0.6 -k1.1 -l0.1 -p10 -c1; fi
# CTest
  - cmake --build . --target test

notifications:
  webhooks:
    urls:
      - https://webhooks.gitter.im/e/c70e4d2749931f601747
      - https://www.travisbuddy.com
    on_success: change
    on_failure: always
