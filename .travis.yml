version: ~> 1.0
language: cpp
dist: bionic
osx_image: xcode11.3

cache:
  - ccache
  - directories:
      - $TRAVIS_BUILD_DIR/vcpkg

addons:
  apt:
    sources:
      - sourceline: 'ppa:ubuntu-toolchain-r/test'
    packages:
      - g++-9
      - ninja-build
      - yasm
  homebrew:
    packages:
      - ccache
      - ninja
      - yasm
    update: true

os:
  - linux
  - osx

compiler:
  - gcc
  - clang

jobs:
  include:
    # Git Check
    - os: linux
      compiler: gcc
      env: GITCHECK=true
      # Skip unnecessary steps since we aren't compiling
      before_install: skip
      install: skip
      script:
        - |
          if [[ -n $(git diff --check HEAD^) ]]; then
            echo "You must remove whitespace before submitting a pull request."
            echo ""
            git diff --check HEAD^
            exit -1
          else
            echo -e "\033[1;32m\xE2\x9C\x93 passed:\033[0m $1";
          fi
      after_success: skip
    # Clang-format
    - os: linux
      compiler: clang
      env: CLANGFORMAT=true
      addons:
        apt:
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
          packages:
            - clang-format-8
      # Skip unnecessary steps since we aren't compiling
      before_install: skip
      install: skip
      script:
        - |
          if [[ -n $(git diff -U0 --no-color HEAD^ | /usr/share/clang/clang-format-8/clang-format-diff.py -style file) ]]; then
            echo "Run clang-format before submitting a pull request."
            echo ""
            git diff -U0 --no-color HEAD^ | /usr/share/clang/clang-format-8/clang-format-diff.py -style file
            exit -1
          else
            echo -e "\033[1;32m\xE2\x9C\x93 passed:\033[0m $1";
          fi
      after_success: skip
    # Clang-tidy
    - os: linux
      compiler: clang
      env: CLANGTIDY=true
      addons:
        apt:
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
          packages:
            - ninja-build
            - yasm
            - clang-tidy-8
      script:
        - mkdir build
        - cd build || exit
        - cmake -G Ninja -D ENABLE_CLANG_TIDY:BOOL=TRUE -D CMAKE_TOOLCHAIN_FILE=$TRAVIS_BUILD_DIR/vcpkg/scripts/buildsystems/vcpkg.cmake ..
        - travis_wait 60 cmake --build .
      after_success: skip
    # CppCheck
    - os: linux
      compiler: gcc
      env: CPPCHECK=true
      addons:
        apt:
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
          packages:
            - g++-9
            - ninja-build
            - yasm
            - cppcheck
      script:
        - mkdir build
        - cd build || exit
        - cmake -G Ninja -D ENABLE_CPPCHECK:BOOL=TRUE -D CMAKE_TOOLCHAIN_FILE=$TRAVIS_BUILD_DIR/vcpkg/scripts/buildsystems/vcpkg.cmake ..
        - cmake --build .
      after_success: skip
    # Valgrind
    - os: linux
      compiler: gcc
      env: VALGRIND=true
      addons:
        apt:
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
          packages:
            - g++-9
            - ninja-build
            - yasm
            - valgrind
      script:
        - mkdir build
        - cd build || exit
        - cmake -G Ninja -D ENABLE_IPO:BOOL=FALSE -D ENABLE_VALGRIND:BOOL=TRUE -D CMAKE_TOOLCHAIN_FILE=$TRAVIS_BUILD_DIR/vcpkg/scripts/buildsystems/vcpkg.cmake ..
        - cmake --build .
      after_success:
        - travis_wait 60 ctest -T memcheck --verbose
        - travis_wait 30 valgrind --leak-check=full --show-leak-kinds=all --verbose ./initialize --s -n32000 -t11
    # AddressSanitizer and UndefinedBehaviorSanitizer
    - os: linux
      compiler: clang
      env: ASAN=true
      addons:
        apt:
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
          packages:
            - ninja-build
            - yasm
      script:
        - mkdir build
        - cd build || exit
        - cmake -G Ninja -D ENABLE_SANITIZER_ADDRESS:BOOL=TRUE -D ENABLE_SANITIZER_UNDEFINED_BEHAVIOR:BOOL=TRUE -D CMAKE_TOOLCHAIN_FILE=$TRAVIS_BUILD_DIR/vcpkg/scripts/buildsystems/vcpkg.cmake ..
        - cmake --build .
      after_success:
        - cd $TRAVIS_BUILD_DIR/build/
        - ./initialize --s -n32000 -t11 -o
        - cd tests
        - ./CDT_test
    # MemorySanitizer
    - os: linux
      compiler: clang
      env: MSAN=true
      addons:
        apt:
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
          packages:
            - ninja-build
            - yasm
      script:
        - mkdir build
        - cd build || exit
        - cmake -G Ninja -D ENABLE_SANITIZER_MEMORY:BOOL=TRUE -D CMAKE_TOOLCHAIN_FILE=$TRAVIS_BUILD_DIR/vcpkg/scripts/buildsystems/vcpkg.cmake ..
        - cmake --build .
      after_success:
        - cd $TRAVIS_BUILD_DIR/build/
        - ./initialize --s -n32000 -t11 -o
        - cd tests
        - ./CDT_test
    # CodeCov
    - os: linux
      compiler: gcc
      env: CODECOV=true
      addons:
        apt:
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
          packages:
            - g++-9
            - ninja-build
            - yasm
            - lcov
      script:
        - mkdir build
        - cd build || exit
        - cmake -G Ninja -D CMAKE_C_COMPILER=gcc-9 -D CMAKE_CXX_COMPILER=g++-9 -D ENABLE_COVERAGE:BOOL=TRUE -D CMAKE_BUILD_TYPE=Debug -D CMAKE_TOOLCHAIN_FILE=$TRAVIS_BUILD_DIR/vcpkg/scripts/buildsystems/vcpkg.cmake ..
        - cmake --build . --config Debug
        - ctest --output-on-failure
      after_success:
        - lcov --capture --directory . --output-file coverage.info
        - lcov --remove coverage.info '/usr/*' '*/usr/include/*' '*/vcpkg/*' --output-file coverage.info
        - lcov --list coverage.info
        - bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"
    # Doxygen
    - os: linux
      compiler: gcc
      env: DOXYGEN=true
      before_install:
        - export CXX="g++-9" CC="gcc-9"
        # Install Linuxbrew which has a more up-to-date Doxygen
        - yes | sh -c "$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)"
        - echo 'eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)' >>~/.profile
        - eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)
        - brew update
      install:
        - brew install graphviz
        - brew install doxygen
      script:
        - cd $TRAVIS_BUILD_DIR
        - doxygen docs/Doxyfile
        - touch docs/html/.nojekyll
      after_success:
        # Overwrite usual after_success step without canceling it (which would cause deploy to not run)
        - pwd
      deploy:
        provider: pages
        skip_cleanup: true
        local_dir: docs/html
        github_token: $GITHUB_TOKEN
        keep_history: true
        verbose: true
        edge: true
        on:
          all_branches: true
          condition: $TRAVIS_BRANCH =~ ^(master|develop)$
  allow_failures:
    - os: osx
    - os: linux
      compiler: clang
      env: CLANGTIDY=true
    - os: linux
      compiler: gcc
      env: DOXYGEN=true
    - os: linux
      compiler: gcc
      env: CODECOV=true

before_install:
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then export PATH="/usr/local/opt/ccache/libexec:$PATH"; fi
  - if [[ "$CXX" == "g++" ]]; then export CXX="g++-9" CC="gcc-9"; fi
  - cmake --version

install:
  # vcpkg should be cached, but install it if not
  - |
    if [[ ! -f vcpkg/vcpkg ]]; then
      git clone https://github.com/Microsoft/vcpkg.git
      cd vcpkg
      ./bootstrap-vcpkg.sh
    fi
  # Install/Update ports
  - cd $TRAVIS_BUILD_DIR/vcpkg
  - git pull
  - ./vcpkg integrate install
  - ./vcpkg install catch2
  - ./vcpkg install docopt
  - ./vcpkg install fmt
  - ./vcpkg install ms-gsl
  - ./vcpkg install eigen3
  - ./vcpkg install tbb
  - ./vcpkg install cgal
  - ./vcpkg upgrade --no-dry-run
  - ./vcpkg list
  - rm -rf downloads buildtrees packages
  - cd ..
  - pwd

script:
  - mkdir build
  - cd build || exit
  - pwd
  - cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=$TRAVIS_BUILD_DIR/vcpkg/scripts/buildsystems/vcpkg.cmake ..
  - cmake --build .

after_success:
  - ctest