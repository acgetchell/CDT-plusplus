version: ~> 1.0
language: cpp
dist: bionic
osx_image: xcode12.2

cache:
  - ccache
  - directories:
      - $TRAVIS_BUILD_DIR/vcpkg
      - /home/travis/.cache/vcpkg/archives

addons:
  apt:
    sources:
      - sourceline: 'ppa:ubuntu-toolchain-r/test'
      - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main'
        key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
    packages:
      - build-essential
      - automake
      - autoconf
      - autoconf-archive
      - libtool-bin
      - texinfo
      - yasm
      - gcc-10
      - g++-10
      - clang-10
      - clang-format-10
      - clang-tidy-10
      - ninja-build
      - cppcheck
      - valgrind
      - doxygen
      - graphviz
      - lcov
  homebrew:
    packages:
      - automake
      - autoconf
      - autoconf-archive
      - libtool
      - texinfo
      - yasm
      - gcc
      - ninja
      - python
      - ccache
    update: true

os:
  - linux
  - osx

compiler:
  - g++-10
  - clang-10

jobs:
  fast_finish: true
  include:
    # Git Check
    - os: linux
      compiler: g++-10
      env: GITCHECK=true
      # Skip unnecessary steps since we aren't compiling
      before_install: skip
      install: skip
      script:
        - |
          if [[ -n $(git diff --check HEAD^) ]]; then
            echo "You must remove whitespace before submitting a pull request."
            echo ""
            git diff --check HEAD^
            exit -1
          else
            echo -e "\033[1;32m\xE2\x9C\x93 passed:\033[0m $1";
          fi
      after_success: skip
    # Clang-format
    - os: linux
      compiler: clang-10
      env: CLANGFORMAT=true
      # Skip unnecessary steps since we aren't compiling
      before_install: skip
      install: skip
      script:
        - |
          if [[ -n $(git diff -U0 --no-color HEAD^ | /usr/share/clang/clang-format-10/clang-format-diff.py -style file) ]]; then
            echo "Run clang-format before submitting a pull request."
            echo ""
            git diff -U0 --no-color HEAD^ | /usr/share/clang/clang-format-10/clang-format-diff.py -style file
            exit -1
          else
            echo -e "\033[1;32m\xE2\x9C\x93 passed:\033[0m $1";
          fi
      after_success: skip
    # Clang-tidy
    - os: linux
      compiler: clang-10
      env: CLANGTIDY=true
      script:
        - mkdir build
        - cd build || exit
        - cmake -G Ninja -D ENABLE_CLANG_TIDY:BOOL=TRUE ..
        - cmake --build .
      after_success: skip
    # CppCheck
    - os: linux
      compiler: g++-10
      env: CPPCHECK=true
      script:
        - mkdir build
        - cd build || exit
        - cmake -G Ninja -D ENABLE_CPPCHECK:BOOL=TRUE ..
        - cmake --build .
      after_success: skip
    # Valgrind
    - os: linux
      compiler: g++-10
      env: VALGRIND=true
      script:
        - mkdir build
        - cd build || exit
        - cmake -G Ninja -D ENABLE_IPO:BOOL=FALSE -D ENABLE_VALGRIND:BOOL=TRUE ..
        - cmake --build .
      after_success:
        - travis_wait 60 ctest -T memcheck --verbose
        - travis_wait 30 valgrind --leak-check=full --show-leak-kinds=all --verbose ./initialize --s -n32000 -t11
    # AddressSanitizer and UndefinedBehaviorSanitizer
    - os: linux
      compiler: clang-10
      env: ASAN=true
      script:
        - mkdir build
        - cd build || exit
        - cmake -G Ninja -D ENABLE_SANITIZER_ADDRESS:BOOL=TRUE -D ENABLE_SANITIZER_UNDEFINED_BEHAVIOR:BOOL=TRUE ..
        - cmake --build .
      after_success:
        - cd $TRAVIS_BUILD_DIR/build/
        - ./initialize --s -n32000 -t11 -o
        - cd tests
        - ./CDT_test
    # LeakSanitizer
    - os: linux
      compiler: clang-10
      env: LSAN=true
      script:
        - mkdir build
        - cd build || exit
        - cmake -G Ninja -D ENABLE_SANITIZER_LEAK:BOOL=TRUE ..
        - cmake --build .
      after_success:
        - cd $TRAVIS_BUILD_DIR/build/
        - ./initialize --s -n32000 -t11 -o
        - cd tests || exit
        - ./CDT_test
    # MemorySanitizer
    - os: linux
      compiler: clang-10
      env: MSAN=true
      script:
        - mkdir build
        - cd build || exit
        - cmake -G Ninja -D ENABLE_SANITIZER_MEMORY:BOOL=TRUE ..
        - cmake --build .
      after_success:
        - cd $TRAVIS_BUILD_DIR/build/
        - ./initialize --s -n32000 -t11 -o
        - cd tests
        - ./CDT_test
    # ThreadSanitizer
    - os: linux
      compiler: clang-10
      env: TSAN=true
      script:
        - mkdir build
        - cd build || exit
        - cmake -G Ninja -D ENABLE_SANITIZER_THREAD:BOOL=TRUE ..
        - cmake --build .
      after_success:
        - cd $TRAVIS_BUILD_DIR/build/
        - ./initialize --s -n32000 -t11 -o
        - cd tests
        - ./CDT_test
    # CodeCov
    - os: linux
      compiler: g++-10
      env: CODECOV=true
      script:
        - mkdir build
        - cd build || exit
        - cmake -D ENABLE_COVERAGE:BOOL=TRUE ..
        - cmake --build . --config Debug
      after_success:
        - ctest --schedule-random -V
        - lcov --capture --directory . --output-file coverage.info
        - lcov --remove coverage.info '/usr/*' '*/usr/include/*' '*/vcpkg/*' --output-file coverage.info
        - lcov --list coverage.info
        - bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"
    # Doxygen
    - os: linux
      compiler: g++-10
      env: DOXYGEN=true
      install: skip
      script:
        - cd $TRAVIS_BUILD_DIR
        - doxygen docs/Doxyfile
        - touch docs/html/.nojekyll
      after_success:
        # Overwrite usual after_success step without canceling it (which would cause deploy to not run)
        - pwd
      deploy:
        provider: pages
        skip_cleanup: true
        local_dir: docs/html
        github_token: $GITHUB_TOKEN
        keep_history: true
        verbose: true
        edge: true
        on:
          all_branches: true
          condition: $TRAVIS_BRANCH =~ ^(master|develop)$
  allow_failures:
    - os: linux
      compiler: clang-10
      env: CLANGTIDY=true

before_install:
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then export PATH="/usr/local/opt/ccache/libexec:$PATH"; fi
  - if [[ "$CXX" == "g++" ]]; then export CXX="g++-10" CC="gcc-10"; fi
  - if [[ "$CXX" == "clang++" && "$TRAVIS_OS_NAME" == "linux" ]]; then export CXX="clang++-10" CC="clang-10"; fi

install:
  # vcpkg should be cached, but clone it if not
  - |
    if [[ ! -f vcpkg/vcpkg ]]; then
      git clone https://github.com/Microsoft/vcpkg.git
    fi
  - export VCPKG_ROOT="$TRAVIS_BUILD_DIR/vcpkg"
  - export PATH="$VCPKG_ROOT:$PATH"
  - cd $VCPKG_ROOT
  - git pull origin master --no-rebase
  - ./bootstrap-vcpkg.sh
  - vcpkg integrate install
  - rm -rf downloads buildtrees packages
  - cmake --version
  - cd ..
  - pwd
  # Install required libraries (these are often cached, so you must remove old dependencies first, as above)
  - travis_retry vcpkg install --feature-flags=manifests

script:
  - mkdir build
  - cd build || exit
  - pwd
  - cmake -G Ninja -D CMAKE_BUILD_TYPE=Release ..
  - cmake --build .

after_success:
  - ctest --output-on-failure