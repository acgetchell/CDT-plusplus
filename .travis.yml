language: cpp
sudo: false
dist: trusty
osx_image: xcode9.2

addons:
  apt:
    packages:
      - gcc-7
      - g++-7
      - ninja-build
      - clang-6.0
      - libmpfr-dev
      - libgmp3-dev
      - libeigen3-dev
      - libtbb-dev
      - libcgal-dev
    sources: &sources
      - ubuntu-toolchain-r-test
      - llvm-toolchain-trusty-6.0

env:
  global:
   - BOOST_VERSION=1.67.0
  matrix:
    - TESTS=true
    - TESTS=false

cache:
  apt:
#  ccache: true
  directories:
    - ${TRAVIS_BUILD_DIR}/boost-${BOOST_VERSION}

os:
  - linux
  - osx

compiler:
  - gcc
  - clang

before_install:
  # Workaround for https://github.com/travis-ci/travis-ci/issues/6307
    - |
      if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        command curl -sSL https://rvm.io/mpapis.asc | gpg --import -;
        rvm get head || true
        brew update
      fi

install:
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      brew outdated cmake || brew upgrade cmake
      brew install gcc
      brew link --overwrite gcc
      brew outdated boost || brew upgrade boost
      brew install ninja
      brew install eigen
      brew unlink python
      brew install tbb
    fi
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      CMAKE_URL="https://cmake.org/files/v3.11/cmake-3.11.1-Linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${TRAVIS_BUILD_DIR}/cmake/bin:${PATH}
      if [[ "${BOOST_VERSION}" != "" ]]; then
        BOOST_DIR=${TRAVIS_BUILD_DIR}/boost-${BOOST_VERSION}
        BOOST_URL="https://github.com/boostorg/boost/archive/boost-${BOOST_VERSION}.tar.gz"
        mkdir -p ${BOOST_DIR}
        { travis_retry wget -O - ${BOOST_URL} | tar --strip-components=1 -xz -C ${BOOST_DIR}; } || exit 1
        CMAKE_OPTIONS+=" -DBOOST_ROOT=${BOOST_DIR}"
      fi
      INCLUDE_DIR="/usr/include/"
    fi
  - cmake --version
  - if [[ "$CXX" = "g++" ]]; then export CXX="g++-7" CC="gcc-7"; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" && "$CXX" == "clang++" ]]; then export
   CXX="clang++-6.0" CC="clang-6.0"; fi
  - echo $CXX $CC
  # Install CGAL from source
  - cd $TRAVIS_BUILD_DIR
  - travis_retry curl -L -o CGAL-4.12.tar.gz https://github.com/CGAL/cgal/archive/releases/CGAL-4.12.tar.gz
  - tar zxvf CGAL-4.12.tar.gz &> install.log
  - cd cgal-releases-CGAL-4.12
  - CMAKE_OPTIONS+=" -DCMAKE_BUILD_TYPE=Release -DWITH_Eigen3=ON"
  - echo ${CMAKE_OPTIONS}
  - cmake ${CMAKE_OPTIONS} -G Ninja .
  - cmake --build .
  - sudo env "PATH=$PATH" cmake --build . --target install &> install.log
  - cd ..

before_script:
  - mkdir build
  - cd build

# Build matrix
# Matrix build combos of {linux,osx} x {gcc,clang} x {TESTS=true, TESTS=false} run script
# Specific includes run their own scripts
matrix:
  fast_finish: true
  include:
    # Git Check
    - os: linux
      compiler: gcc
      env: TESTS=false GITCHECK=true
      # Skip unnecessary steps since we aren't compiling
      before_install:
      install:
      before_script:
      # Overwrite script on matrix jobs
      script:
        - |
          if [[ -n $(git diff --check HEAD^) ]]; then
            echo "You must remove whitespace before submitting a pull request."
            echo ""
            git diff --check HEAD^
            exit -1
          fi
      # Skip after_success
      after_success:
    # ClangFormat
    - os: linux
      compiler: clang
      env: TESTS=false CLANGFORMAT=true
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-6.0
          packages:
            - clang-6.0
            - clang-format-6.0
      # Skip unnecessary steps since we aren't compiling
      before_install:
      install:
      before_script:
      # Overwrite script on matrix jobs
      script:
        - |
          if [[ -n $(git diff -U0 --no-color HEAD^ | /usr/share/clang/clang-format-6.0/clang-format-diff.py -style file) ]]; then
            echo "Run clang-format before submitting a pull request."
            echo ""
            git diff -U0 --no-color HEAD^ | /usr/share/clang/clang-format-6.0/clang-format-diff.py -style file
            exit -1
          fi
      # Skip after_success
      after_success:
    # ClangTidy
    - os: linux
      compiler: clang
      env: TESTS=false CLANGTIDY=true
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-6.0
          packages:
            - clang-6.0
            - clang-tidy-6.0
      # Skip unnecessary steps since we aren't compiling
      before_install:
      install:
      before_script:
      # Overwrite script on matrix jobs
      script:
        - git diff -U0 HEAD^ | /usr/lib/llvm-6.0/share/clang/clang-tidy-diff.py > output.txt
        - |
          if [[ -n $(grep "warning: " output.txt) ]] || [[ -n $(grep "error: " output.txt) ]]; then
            echo "You must pass the clang tidy checks before submitting a pull request"
            echo ""
            grep --color -E '^|warning: |error: ' output.txt
            exit -1;
          else
            echo -e "\033[1;32m\xE2\x9C\x93 passed:\033[0m $1";
          fi
        # Skip after_success
      after_success:
    # Valgrind
    - os: linux
      compiler: gcc
      env: TESTS=false VALGRIND=true
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-7
            - g++-7
            - ninja-build
            - libmpfr-dev
            - libgmp3-dev
            - libeigen3-dev
            - libtbb-dev
            - libcgal-dev
            - valgrind
      script:
        - cmake -DCMAKE_CXX_COMPILER=g++-7 -DVALGRIND=ON -DTESTS:BOOL=OFF -DBOOST_ROOT=${BOOST_DIR} -G Ninja ..
        - cmake --build .
        - ctest -T memcheck
    # Codecov
    - os: linux
      compiler: gcc
      env: TESTS=false CODECOV=true
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-7
            - g++-7
            - ninja-build
            - libmpfr-dev
            - libgmp3-dev
            - libeigen3-dev
            - libtbb-dev
            - libcgal-dev
            - lcov
      script:
        - cmake -DTESTS:BOOL=ON -DENABLE_COVERAGE=ON -DCMAKE_CXX_COMPILER="g++-7" -DBOOST_ROOT=${BOOST_DIR} -G Ninja ..
        - cmake --build .
      after_success:
        - cd ${TRAVIS_BUILD_DIR}/build
        - pwd
        - ctest
        - cd ${TRAVIS_BUILD_DIR}
        - lcov --directory . --capture --output-file coverage.info
        - lcov --remove coverage.info '/usr/*' --output-file coverage.info
        - lcov --list coverage.info
        - bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"
    # SonarQube
    - os: osx
      compiler: clang
      env: TESTS=false SONARQUBE=true
      addons:
        sonarcloud:
          organization: "acgetchell-github"
          branches:
            - develop
            - master
      # Skip unnecessary steps
      before_install:
        - git fetch --unshallow
      script:
        - CMAKE_OPTIONS="-DTESTS:BOOL=ON -DCMAKE_BUILD_TYPE=Debug -DBOOST_ROOT=${BOOST_DIR}"
        - build-wrapper-macosx-x86 --out-dir bw_output cmake ${CMAKE_OPTIONS} -G Ninja ..
        - sonar-scanner -X -Dproject.settings=../sonar-project.properties
      cache:
        ccache: true
        directories:
          - '$HOME/.sonar/cache'
          - ${TRAVIS_BUILD_DIR}/boost-${BOOST_VERSION}
      after_success:
  allow_failures:
    - os: linux
      compiler: gcc
      env: TESTS=false VALGRIND=true
    - os: linux
      compiler: gcc
      env: TESTS=false CODECOV=true
    - os: linux
      compiler: clang
      env: TESTS=false CLANGTIDY=true
    - os: osx
      compiler: clang
      env: TESTS=false SONARQUBE=true
    - os: linux
      compiler: clang
      env: TESTS=true
    - os: linux
      compiler: clang
      env: TESTS=false
    - os: linux
      compiler: gcc
      env: TESTS=true
    - os: linux
      compiler: gcc
      env: TESTS=false

script:
  - CMAKE_OPTIONS="-DBOOST_ROOT=${BOOST_DIR} -DBUILD_SHARED_LIBS=ON"
  - |
    if [[ ${TESTS} == "true" ]]; then
      CMAKE_OPTIONS+=" -DCMAKE_BUILD_TYPE=Debug -DTESTS:BOOL=ON"
    else
      CMAKE_OPTIONS+=" -DCMAKE_BUILD_TYPE=Release -DTESTS:BOOL=OFF"
    fi
  - echo $CMAKE_OPTIONS
  - cmake $CMAKE_OPTIONS -G Ninja ..
  - cmake --build .

after_success:
  - cd build
  # Integration tests excluding Catch
#  - ctest -E CDT-unit-tests
  # Catch tests showing only failures
  - if [[ ${TESTS} == "true" ]]; then ./test/CDT_test; fi

notifications:
  webhooks:
    urls:
      - https://webhooks.gitter.im/e/c70e4d2749931f601747
      - https://www.travisbuddy.com
    on_success: change
    on_failure: always
