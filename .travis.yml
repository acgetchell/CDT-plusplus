language: cpp
sudo: true
dist: xenial
#osx_image: xcode9.2

addons:
  apt:
    packages:
      - g++-8
      - ninja-build
      - clang-6.0
#      - python3-pip
#      - python3-setuptools
#      - libmpfr-dev
#      - linuxbrew-wrapper
    sources:
      - sourceline: "ppa:ubuntu-toolchain-r/test"
#      - ubuntu-toolchain-r-test
#      - llvm-toolchain-trusty-6.0

env:
#  global:
#   - BOOST_VERSION=1.67.0
  matrix:
    - TESTS=true
    - TESTS=false

cache:
#  apt:
#  ccache: true
#  directories:
#    - ${TRAVIS_BUILD_DIR}/boost-${BOOST_VERSION}

os:
  - linux
  - osx

compiler:
  - gcc
  - clang

before_install:
#    - |
#      if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
#        brew update
#        python -m pip install --upgrade pip
#      fi
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      git clone https://github.com/Linuxbrew/brew.git $HOME/.linuxbrew
      export HOMEBREW_FORCE_VENDOR_RUBY=1
      PATH="$HOME/.linuxbrew/bin:$PATH"
      echo 'export PATH="/home/travis/.linuxbrew/bin:$PATH"' >> ~/.bash_profile
      export MANPATH="$(brew --prefix)/share/man:$MANPATH"
      export INFOPATH="$(brew --prefix)/share/info:$INFOPATH"
      echo $PATH
    fi
  - brew --version

install:
  - brew update
  - brew install ccache
  - export PATH="/usr/local/opt/ccache/libexec:$PATH"
  - |
    if [[ "$CXX" == "g++" ]]; then
      brew install gcc
      brew link --overwrite gcc
    fi
  - brew install ninja
  - brew install cgal
  - brew install lcov
  - brew install conan
  - |
    if [[ "VALGRIND" == "true" ]]; then
      brew install valgrind
      echo Valgrind installed
    fi
#  - |
#    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
#      brew install ccache
#      export PATH="/usr/local/opt/ccache/libexec:$PATH"
#      if [[ "$CXX" == "g++" ]]; then
#        brew install gcc
#        brew link --overwrite gcc
#      fi
#      brew install ninja
#      brew install cgal
#      brew install lcov
#      brew install conan
#    else
#      sudo pip3 install conan
#    fi
#  - |
#    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
#      CMAKE_URL="https://cmake.org/files/v3.11/cmake-3.11.2-Linux-x86_64.tar.gz"
#      mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
#      export PATH=${TRAVIS_BUILD_DIR}/cmake/bin:${PATH}
#      if [[ "${BOOST_VERSION}" != "" ]]; then
#        BOOST_DIR=${TRAVIS_BUILD_DIR}/boost-${BOOST_VERSION}
#        BOOST_URL="https://github.com/boostorg/boost/archive/boost-${BOOST_VERSION}.tar.gz"
#        mkdir -p ${BOOST_DIR}
#        { travis_retry wget -O - ${BOOST_URL} | tar --strip-components=1 -xz -C ${BOOST_DIR}; } || exit 1
#        CMAKE_OPTIONS+=" -DBOOST_ROOT=${BOOST_DIR}"
#      fi
#      INCLUDE_DIR="/usr/include/"
#    fi
#  - cmake --version
  - if [[ "$CXX" = "g++" ]]; then export CXX="g++-8" CC="gcc-8"; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" && "$CXX" == "clang++" ]]; then export CXX="clang++-6.0" CC="clang-6.0"; fi
  - conan remote add bincrafters https://api.bintray.com/conan/bincrafters/public-conan
  # Install CGAL from source
#  - cd $TRAVIS_BUILD_DIR
#  - travis_retry curl -L -o CGAL-4.12.tar.gz https://github.com/CGAL/cgal/archive/releases/CGAL-4.12.tar.gz
#  - tar zxvf CGAL-4.12.tar.gz &> install.log
#  - cd cgal-releases-CGAL-4.12
#  - CMAKE_OPTIONS+=" -DCMAKE_BUILD_TYPE=Release -DWITH_Eigen3=ON"
#  - echo ${CMAKE_OPTIONS}
#  - cmake ${CMAKE_OPTIONS} -G Ninja .
#  - cmake --build .
#  - sudo env "PATH=$PATH" cmake --build . --target install &> install.log
#  - cd ..

before_script:
  - mkdir build
  - cd build

# Build matrix
# Matrix build combos of {linux,osx} x {gcc,clang} x {TESTS=true, TESTS=false} run script
# Specific includes run their own scripts
matrix:
  fast_finish: true
  include:
    # Git Check
    - os: linux
      compiler: gcc
      env: TESTS=false GITCHECK=true
      # Skip unnecessary steps since we aren't compiling
      before_install:
      install:
      before_script:
      # Overwrite script on matrix jobs
      script:
        - |
          if [[ -n $(git diff --check HEAD^) ]]; then
            echo "You must remove whitespace before submitting a pull request."
            echo ""
            git diff --check HEAD^
            exit -1
          fi
      # Skip after_success
      after_success:
    # ClangFormat
    - os: linux
      compiler: clang
      env: TESTS=false CLANGFORMAT=true
      addons:
        apt:
          sources:
#            - ubuntu-toolchain-r-test
#            - llvm-toolchain-trusty-6.0
            - sourceline: "ppa:ubuntu-toolchain-r/test"
          packages:
            - clang-6.0
            - clang-format-6.0
      # Skip unnecessary steps since we aren't compiling
      before_install:
      install:
      before_script:
      # Overwrite script on matrix jobs
      script:
        - |
          if [[ -n $(git diff -U0 --no-color HEAD^ | /usr/share/clang/clang-format-6.0/clang-format-diff.py -style file) ]]; then
            echo "Run clang-format before submitting a pull request."
            echo ""
            git diff -U0 --no-color HEAD^ | /usr/share/clang/clang-format-6.0/clang-format-diff.py -style file
            exit -1
          fi
      # Skip after_success
      after_success:
    # ClangTidy
    - os: linux
      compiler: clang
      env: TESTS=false CLANGTIDY=true
      addons:
        apt:
          sources:
#            - ubuntu-toolchain-r-test
#            - llvm-toolchain-trusty-6.0
            - sourceline: "ppa:ubuntu-toolchain-r/test"
          packages:
            - clang-6.0
            - clang-tidy-6.0
      # Skip unnecessary steps since we aren't compiling
      before_install:
      install:
      before_script:
      # Overwrite script on matrix jobs
      script:
        - git diff -U0 HEAD^ | /usr/lib/llvm-6.0/share/clang/clang-tidy-diff.py > output.txt
        - |
          if [[ -n $(grep "warning: " output.txt) ]] || [[ -n $(grep "error: " output.txt) ]]; then
            echo "You must pass the clang tidy checks before submitting a pull request"
            echo ""
            grep --color -E '^|warning: |error: ' output.txt
            exit -1;
          else
            echo -e "\033[1;32m\xE2\x9C\x93 passed:\033[0m $1";
          fi
        # Skip after_success
      after_success:
    # Valgrind
    - os: linux
      compiler: gcc
      env: TESTS=false VALGRIND=true
#      addons:
#        apt:
#          sources:
##            - ubuntu-toolchain-r-test
#            - sourceline: "ppa:ubuntu-toolchain-r/test"
#          packages:
#            - gcc-8
#            - g++-8
#            - ninja-build
#            - libmpfr-dev
#            - libgmp3-dev
#            - libeigen3-dev
#            - libtbb-dev
#            - libcgal-dev
#            - valgrind
      script:
        - cmake -DCMAKE_CXX_COMPILER=g++-8 -DVALGRIND=ON -DTESTS:BOOL=OFF -DBOOST_ROOT=${BOOST_DIR} -G Ninja ..
        - cmake --build .
        - ctest -T memcheck
    # Codecov
    - os: osx
      compiler: clang
      env: TESTS=true CODECOV=true
      script:
        - cd ${TRAVIS_BUILD_DIR}
        - travis_wait 60 ctest --quiet -S lcov.cmake
      after_success:
        - cd ${TRAVIS_BUILD_DIR}/build
        - pwd
        - lcov --list stepcode_filtered.lcov
        - bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"
    # SonarQube
    - os: osx
      compiler: clang
      env: TESTS=false SONARQUBE=true
      addons:
        sonarcloud:
          organization: "acgetchell-github"
          branches:
            - develop
            - master
      # Skip unnecessary steps
      before_install:
        - git fetch --unshallow
      script:
        - CMAKE_OPTIONS="-DTESTS:BOOL=ON -DCMAKE_BUILD_TYPE=Debug -DBOOST_ROOT=${BOOST_DIR}"
        - build-wrapper-macosx-x86 --out-dir bw_output cmake ${CMAKE_OPTIONS} -G Ninja ..
        - sonar-scanner -X -Dproject.settings=../sonar-project.properties
      cache:
        ccache: true
        directories:
          - '$HOME/.sonar/cache'
          - ${TRAVIS_BUILD_DIR}/boost-${BOOST_VERSION}
      after_success:
  allow_failures:
    - os: linux
      compiler: gcc
      env: TESTS=false VALGRIND=true
    - os: linux
      compiler: clang
      env: TESTS=true
    - os: linux
      compiler: clang
      env: TESTS=false
    - os: linux
      compiler: gcc
      env: TESTS=true
    - os: linux
      compiler: gcc
      env: TESTS=false
    - os: osx
      compiler: gcc
      env: TESTS=true
    - os: osx
      compiler: gcc
      env: TESTS=false

script:
#  - CMAKE_OPTIONS="-DBOOST_ROOT=${BOOST_DIR} -DBOOST_INCLUDEDIR=${BOOST_DIR}/include -DBOOST_LIBRARYDIR=${BOOST_DIR}/lib"
#  - |
#    if [[ ${TESTS} == "true" ]]; then
#      CMAKE_OPTIONS+=" -DCMAKE_BUILD_TYPE=Debug -DTESTS:BOOL=ON"
#    else
#      CMAKE_OPTIONS+=" -DCMAKE_BUILD_TYPE=Release -DTESTS:BOOL=OFF"
#    fi
#  - echo $CMAKE_OPTIONS
#  - cmake $CMAKE_OPTIONS -G Ninja ..
#  - cmake --build .
  - conan profile new default --detect
  # Use Ninja
  - conan profile update env.CONAN_CMAKE_GENERATOR=Ninja default
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" && "$CXX" == "clang++" ]]; then
      echo osx/clang autodetected libcxx is fine
      conan install .. -pr default --build=missing
    else
      echo gcc and linux using libstdc++11
      conan profile update settings.compiler.libcxx=libstdc++11 default
      conan install .. -pr default --build=missing
    fi
  - conan build ..
after_success:
#  - cd build
  # Integration tests excluding Catch
#  - ctest -E CDT-unit-tests
  # Catch tests showing only failures
  - if [[ ${TESTS} == "true" ]]; then travis_wait 30 ctest; fi

notifications:
  webhooks:
    urls:
      - https://webhooks.gitter.im/e/c70e4d2749931f601747
      - https://www.travisbuddy.com
    on_success: change
    on_failure: always
